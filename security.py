# Security utilities like JWT and hashing\nfrom datetime import datetime, timedelta\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\n\nclass Security:\n    def __init__(self):\n        self.pwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\n        self.secret_key = \"secret\"\n        self.algorithm = \"HS256\"\n        self.access_token_expire_minutes = 30\n\n    def create_access_token(self, data: dict):\n        to_encode = data.copy()\n        expire = datetime.utcnow() + timedelta(minutes=self.access_token_expire_minutes)\n        to_encode.update({\"exp\": expire})\n        encoded_jwt = jwt.encode(to_encode, self.secret_key, algorithm=self.algorithm)\n        return encoded_jwt\n\n    def verify_password(self, plain_password, hashed_password):\n        return self.pwd_context.verify(plain_password, hashed_password)\n\n    def get_password_hash(self, password):\n        return self.pwd_context.hash(password) 
